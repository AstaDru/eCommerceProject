openapi: "3.0.1"
info:
  title: E-Commerce Shop - Project
  description:
    'A CodeCademy API project built using NodeJS, PostgreSQL, express, express-session, dot-env'
  version: 1.0.0
servers:
  - url: localhost:PORT/api
tags:
  - name: users
    description: Operations about users
  - name: browse
    description: Everything about your items
  - name: cart
    description: CRUD actions on the current cart
  - name: orders
    description: information on all orders made by user 
paths:
  /register:
    summary: post new user
    description: 'Creates a new user account and returns the user object '
    post:
      summary: post to create user account
      description: 'creates new user account '
      operationId: register
      responses:
        default:
          description: Default error sample response
      tags:
        - users
  /login:
    summary: post login details
    description: ' authenticates the user by fetching account using email'
    post:
      summary: post login details
      description: authenticates the user by fetching account using email
      operationId: login
      requestBody:
        description: 'Use email and password to login'
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: varchar
                  example: 'john@doe.com'
                password:
                  type: string
                  format: varchar
                  example: 'secret123'
      responses:
        '200':
          description: 'Login successful'
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    format: varchar
                    example: 'John'
                  surname:
                    type: string
                    format: varchar
                    example: 'Doe'
                  email:
                    type: string
                    format: varchar
                    example: 'john@doe.com'
      tags:
        - users
  /logout:
    summary: post login details
    description: 'Ends current session'
    get:
      summary: 'Terminates session'
      description: 'Logout the user removing stored express-session'
      operationId: logout
      responses:
        '204':
          description: 'No content'
      tags:
        - users
          
  /settings:
    summary: put update user details
    description: >-
      takes in to values {attribute: string, value: string } where attribute
      represents the users attribute key and value as the new value.
    put:
      summary: put update user details
      description: >-
        takes in to values {attribute: string, value: string } where attribute
        represents the users attribute key and value as the new value.
      operationId: settings
      responses:
        '200':
          description: 'Successful changed'
      tags:
        - users
  /deleteuser:
    summary: delete user account
    description: ' Deletes user using id of current session user'
    delete:
      summary: delete user
      description: Deletes user using id of current session user
      operationId: deleteUser
      responses:
        default:
          description: Default error sample response
      tags:
        - users
  /browse:
    summary: get items array
    description: Returns an Array of all items in shop as objects
    get:
      summary: get all items
      description: returns a list with all items in a shop
      operationId: browse
      responses:
        '200':
          description: 'Array of items'
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/items'
      tags:
        - browse
  /browse/{name}:
    summary: get item by name
    description: ' Returns an item object by {name} which is passed as a url param'
    get:
      summary: get item
      description: get item by name from shop items
      operationId: browse_name
      parameters:
        - name: name
          in: path
          required: true
          description: 'the name of an item in the database'
          schema:
            type: string
            example: 'apple'
      responses:
        '200':
          description: 'An item from the items in Database'
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/items'
            
      tags:
        - browse
  /cart:
    summary: get cart items
    description: Returns an Array of all items in cart as objects
    get:
      summary: get users cart items
      description: Returns an Array of all items in cart as objects
      operationId: cart
      responses:
        '200':
          description: 'Items successfully fetched'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/cart_items'
        '404':
          description: 'No items found'
      tags:
        - cart
  /cart/additem:
    summary: post cart item
    description: ' adds an item from items to a cart'
    post:
      summary: 'post item to a cart '
      description: 'adds an item from items to cart '
      operationId: addItem
      requestBody:
        description: Take an item name and quantity
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cart_items'
      responses:
        '200':
          description: Default error sample response
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/items'
      tags:
        - cart
  /cart/changeqty:
    summary: 'put updates cart item quantity '
    description: 'Set new quantity of the item in a cart '
    put:
      summary: put update cart item quantity
      description: 'Set new quantity of item in cart '
      operationId: changeQty
      responses:
        default:
          description: Default error sample response
      tags:
        - cart
  /cart/removeitem:
    summary: deletes a single item from cart
    description: removes item from a cart by name
    delete:
      summary: delete cart item
      description: 'remove an item from users cart '
      operationId: removeItem
      responses:
        default:
          description: Default error sample response
      tags:
        - cart
  /cart/clear:
    summary: deletes all cart items
    description: Removes all items inside of the cart
    delete:
      summary: delete cart
      description: removes all items in a cart
      operationId: clear
      responses:
        default:
          description: Default error sample response
      tags:
        - cart
  /cart/checkout:
    summary: get generated checkout order
    description: makes an order with all current cart items, returning the order id
    get:
      summary: get generated order for checkout
      description: makes an order with all current cart items, returning the order id
      operationId: checkout
      responses:
        default:
          description: Default error sample response
      tags:
        - cart
  /orders:
    summary: get all user orders
    description: Returns an Array of all orders made by user
    get:
      summary: get all orders
      description: ' Returns an Array of all orders made by user'
      operationId: orders
      responses:
        '200':
          description: An array of items in a cart
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/orders'
      tags:
        - orders
  /orders/{id}:
    summary: get item by name
    description: ' Returns an item object by {name} which is passed as a url param'
    get:
      summary: view items in an order by id
      description: uses {id} to select any cart that belongs to user 
      operationId: ordersById
      parameters:
        - name: id
          in: path
          required: true
          description: 'An any Id of a cart from /cart/ '
          schema:
            type: string
            example: uuid
      responses:
        '200':
          description: An array of items in a cart
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/cart_items'
        '204':
          description: Cart is empty
        '404':
          description: 'No cart found'
             
      tags:
        - orders
components:
  schemas:
    users:
      type: object
      properties:
        id:
          type: string
          format: varchar(50)
          example: 'usrid'
        name:
          type: string
          format: varchar(50)
          example: john
        surname:
          type: string
          format: varchar(50)
          example: Doe
        email:
          type: string
          format: varchar(50)
          example: john@doe.com
        password:
          type: string
          format: varchar(50)
          example: secret123
        address:
          type: string
          format: varchar(50)
          example: '22 Jump str'
      xml:
        name: users
    items:
      type: object
      properties:
        name:
          type: string
          format: varchar
          example: apple
        price:
          type: integer
          example: 3
        quantity:
          type: integer
          example: 50
      xml:
        name: items
    orders:
      type: object
      properties:
        id:
          type: string
          format: varchar
          example: 'order_uuid'
        users_id:
          type: string
          format: varchar
          example: 'usrid'
        status:
          type: string
          format: varchar(50)
          enum: ['current', 'completed']
        total_price:
          type: integer
          example: 30
        total_quantity:
          type: integer
          example: 70
      xml:
        name: orders
    cart_items:
      type: object
      properties:
        order_id:
          type: string
          format: varchar
          example: 'order_uuid'
        users_id:
          type: string
          format: varchar
          example: 'usrid'
        item_name:
          type: string
          format: varchar
          example: 'apple'
        quantity:
          type: integer
          example: 20
        price:
          type: integer
          example: 2
      xml:
        name: cart_items