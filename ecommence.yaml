openapi: "3.0.1"
info:
  title: E-Commerce Shop - Project
  description:
    'A CodeCademy API project built using NodeJS, PostgreSQL, express, express-session, dot-env'
  version: 1.0.0
servers:
  - url: localhost:3000/api
tags:
  - name: users
    description: Operations about users
  - name: browse
    description: Everything about your items
  - name: cart
    description: CRUD actions on the current cart
  - name: orders
    description: information on all orders made by user 
paths:
  /register:
    summary: post new user
    description: 'Creates new user account with given details and adds it to a db.users table '
    post:
      security: []
      summary: post create user account
      description: 'Creates new user account with given details and adds it to a db.users table'
      operationId: register
      requestBody:
        description: 'Use name, surname, email, password and address fields to create a new user with given details in db.users table'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users'
      responses:
        '200':
          description: 'Registration was successful'
          headers:
            session:
              description: set the session to authenticated and adds  values to user object
              schema:
                type: object
                example: request.session.authenticated = true;
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    format: varchar
                    example: 'User Created'
                  name:
                    type: string
                    format: varchar
                    example: 'Larry'
                  surname:
                    type: string
                    format: varchar
                    example: 'Smiles'
                  email:
                    type: string
                    format: varchar
                    example: 'smiles@smiles.com'
                    
        '400':
          description: 'Registration was unsuccessful, error occured'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    format: varchar
                    example: 'User already exists'
                  
      tags:
        - users
  /login:
    summary: post login details
    description: 'authenticates user by given email and password details that are in db.users table'
    post:
      summary: post login details
      description: 'uses email and password compares entered password with password in db.users'
      operationId: login
      requestBody:
        description: 'Use email and password to login'
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: varchar
                  example: 'john@doe.com'
                password:
                  type: string
                  format: varchar
                  example: 'secret123'
      responses:
        '200':
          description: 'Login successful'
          headers:
            session:
              description: set the session to authenticated and adds  values to user object
              schema:
                type: object
                example: request.session.authenticated = true;
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    format: varchar
                    example: 'John'
                  surname:
                    type: string
                    format: varchar
                    example: 'Doe'
                  email:
                    type: string
                    format: varchar
                    example: 'john@doe.com'
                    
        '400':
          description: 'Login unsuccessful'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    format: varchar
                    example: 'Wrong password'
        
        '404':
          description: 'Login unsuccessful'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    format: varchar
                    example: 'Invalid attribute on user'
          
          
      tags:
        - users
  /logout:
    summary: get logout 
    description: 'Ends user current session by removing stored express-session'
    get:
      summary: 'Terminates session'
      description: 'Ends user current session by removing stored express-session'
      operationId: logout
      responses:
        '204':
          description: 'No content'
          headers: 
            express-session:
              description: sets session to null, which clears all stored session values
              schema: 
                type: object
                example: request.session = null;
      tags:
        - users
          
  /settings:
    summary: put update user details
    description: >-
      updates user in db.users table given attribute value with passed new information within the setAttribute value
    put:
      summary: put update user details
      description: >-
              updates user info given attribute which has to match with the users schema column head and not id and set it to the value passed in
      operationId: settings
      requestBody:
        description: 'Use given attribute and setAttribute to update current session user details in db.users table'
        content:
          application/json:
            schema:
              type: object
              properties:
                attribute:
                  type: string
                  format: varchar
                  example: 'name'
                value: # changed db.js code @line:75 to reflect <
                  type: string
                  format: varchar
                  example: 'Holly'
      responses:
        '200':
          description: 'Update successful'
          content:
            application/json:
              schema:
                # $ref: '#/components/schemas/users' ## user data leak
                type: object
                properties:
                  message:
                    type: string
                    format: varchar
                    example: 'Update successful'
                   
        '400':
          description: 'Update unsuccessful'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    format: varchar
                    example: 'Error details'
                  detail:
                    type: string
                    format: varchar
                    example: 'Error details'
        
        '404':
          description: 'Update unsuccessful'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    format: varchar
                    example: 'Invalid attribute/value on user'
          
          
      tags:
        - users
  /deleteuser:
    summary: delete user account
    description: 'Deletes user by user id of current user session from db.user table'
    delete:
      summary: delete user
      description: uses id stored in req.session.user.id to delete the current user from db.users
      operationId: deleteUser
      responses:
        '204':
          description: 'User successful deleted'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    format: varchar
                    example: 'User successful deleted'
        
        '400':
          description: 'User deletion unsuccessful '
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    format: varchar
                    example: 'User deletion unsuccessful '
        
      tags:
        - users
  /browse:
    summary: get items array
    description: 'returns a list of all items information that shop is holding from db.items table.'
    get:
      security: []
      summary: get all items
      description: returns a list with all items in a shop
      operationId: browse
      responses:
        '200':
          description: 'Array of items'
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/items'
                  
        '404':
          description: 'Coul not get all items '
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    format: varchar
                    example: 'Error message'
      tags:
        - browse
  /browse/{name}:
    summary: get item by name
    description: 'returns searched item by name that was passed as a url param from db.items'
    get:
      security: []
      summary: get item
      description: returns searched item by name that was passed as a url param from db.items
      operationId: browse_name
      parameters:
        - name: name
          in: path
          required: true
          description: 'The name of an item that is already in the db.items'
          schema:
            type: string
            example: 'apple'
      responses:
      
        '200':
          description: 'item from db.items table'
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/items'
                type: object
                properties:
                  message:
                    type: string
                    format: varchar
                    example: 'found item ...'
                    
        '400':
          description: 'Could not get items fron db.items table'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    format: varchar
                    example: 'Error message'
                  detail:
                    type: string
                    format: varchar
                    example: 'Error details'
        
        '404':
          description: 'unsuccessful update'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    format: varchar
                    example: 'Item not found'
            
      tags:
        - browse
  /cart:
    summary: get cart items
    description: Returns an Array of all items in cart as objects
    get:
      summary: get users cart items
      description: Returns an Array of all items in cart as objects
      operationId: cart
      responses:
        '200':
          description: 'Items successfully fetched'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/cart_items'
        '404':
          description: 'No items found'
          #######################################################################
      tags:
        - cart
  /cart/additem:
    summary: post cart item
    description: ' adds an item from items to a cart'
    post:
      summary: 'post item to a cart '
      description: 'adds an item from items to cart '
      operationId: addItem
      requestBody:
        description: Take an item name and quantity
        content:
          application/json:
            schema:
              type: object
              properties:
                itemName:
                  type: string
                  format: varchar
                  example: 'apple'
                quantity:
                  type: integer
                  example: 20
                  
      responses:
        '200':
          description: Default error sample response
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/cart_items'
        '400':
          description: Invalid values 
        '404':
          description: Error
      tags:
        - cart
  /cart/changeqty:
    summary: 'put updates cart item quantity '
    description: 'Set new quantity of the item in a cart '
    put:
      summary: put update cart item quantity
      description: 'Set new quantity of item in cart '
      operationId: changeQty
      requestBody:
        description: Take an item name and quantity
        content:
          application/json:
            schema:
              type: object
              properties:
                itemName:
                  type: string
                  format: varchar
                  example: 'apple'
                quantity:
                  type: integer
                  example: 30
      responses:
        '200':
          description: Default error sample response
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/cart_items'
        '400':
          description: Invalid values 
        '404':
          description: Error
      tags:
        - cart
  /cart/removeitem:
    summary: deletes a single item from cart
    description: removes item from a cart by name
    delete:
      summary: delete cart item
      description: 'remove an item from users cart '
      operationId: removeItem
      requestBody:
        description: Requires itemName
        content:
          application/json:
            schema:
              type: object
              properties:
                itemName:
                  type: string
                  format: varchar
                  example: 'apple'
                  
      responses:
        '204':
          description: No content - Item scuccefully removed from cart
        '400':
          description: Invalid values 
        '404':
          description: Error
      tags:
        - cart
  /cart/clear:
    summary: deletes all cart items
    description: Removes all items inside of the cart
    delete:
      summary: delete cart
      description: removes all items in a cart
      operationId: clear
      responses:
        '204':
          description: all Cart items have been succefully deleted
        '400':
          description: Error
      tags:
        - cart
  /cart/checkout:
    summary: get generated checkout order
    description: makes an order with all current cart items, returning the order id
    get:
      summary: get generated order for checkout
      description: sets the current user cart to completed and calculates the total price and quantity, The db will then automatically generate a new empty cart for user
      operationId: checkout
      responses:
        '200':
          description: the status is set to completed with a message to the user about their address and delivery date
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/orders'
        '400':
          description: No content
        '404':
          description: Error
      tags:
        - cart
  /orders:
    summary: get all user orders
    description: Returns an Array of all orders made by user
    get:
      summary: get all orders
      description: ' Returns an Array of all orders made by user'
      operationId: orders
      responses:
        '200':
          description: An array of items in a cart
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/orders'
      tags:
        - orders
  /orders/{id}:
    summary: get item by name
    description: 'Returns an item object by {name} which is passed as a url param'
    get:
      summary: view items in an order by id
      description: uses {id} to select any cart that belongs to user 
      operationId: ordersById
      parameters:
        - name: id
          in: path
          required: true
          description: 'An any Id of a cart from /cart/ '
          schema:
            type: string
            example: uuid
      responses:
        '200':
          description: An array of items in a cart
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/cart_items'
        '204':
          description: Cart is empty
        '404':
          description: 'No cart found'
             
      tags:
        - orders
components:
  schemas:
    users: # Moved Larry to schemas/users/example
      type: object
      properties:
        id:
          type: string
          format: varchar(50)
          example: 'usrid'
        name:
          type: string
          format: varchar(50)
          example: 'Larry'
        surname:
          type: string
          format: varchar(50)
          example: 'Smiles'
        email:
          type: string
          format: varchar(50)
          example: 'smiles@smiles.com'
        password:
          type: string
          format: varchar(50)
          example: 'pass3'
        address:
          type: string
          format: varchar(50)
          example: '78 Wally Street QRT9 8WQ'
      xml:
        name: users
    items:
      type: object
      properties:
        name:
          type: string
          format: varchar
          example: apple
        price:
          type: integer
          example: 3
        quantity:
          type: integer
          example: 50
        description:
          type: string
          format: varchar
          example: 'The spherical fruit commonly red, green or red n yellow'
      xml:
        name: items
    orders:
      type: object
      properties:
        id:
          type: string
          format: varchar
          example: 'order_uuid'
        users_id:
          type: string
          format: varchar
          example: 'usrid'
        status:
          type: string
          format: varchar(50)
          enum: ['current', 'completed']
        total_price:
          type: integer
          example: 30
        total_quantity:
          type: integer
          example: 70
      xml:
        name: orders
    cart_items:
      type: object
      properties:
        order_id:
          type: string
          format: varchar
          example: 'order_uuid'
        users_id:
          type: string
          format: varchar
          example: 'usrid'
        item_name:
          type: string
          format: varchar
          example: 'apple'
        quantity:
          type: integer
          example: 20
        price:
          type: integer
          example: 2
      xml:
        name: cart_items
  
  securitySchemes:
    sessionAuth:
      type: apiKey
      in: cookie
      name: express-session
  
security:
  - sessionAuth: []